
Objects
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object

1.Object literal
let user = {     // an object
  name: "John",  // by key "name" store value "John"
  age: 30        // by key "age" store value 30
};

2.By creating instance of Object
let myobj = new Object();
myobj.name = "Apple";
myobj.price = 500;
console.log(myobj);

3.By using an Object constructor
function myfruit(name, price) {
    this.name = name;
    this.price = price;
}
let myObj = new myfruit("Orange", 1000)
console.log(myObj);

4.Nested Objects
let user = {
  name: "John", // by key "name" store value "John"
  age: 30, // by key "age" store value 30
  parent: {
    fatherName: "Steve",
    motherName: "Amelia"
  }
};

To remove a property, we can use delete operator:
delete user.age;

Object with const can be changed
const user = {
  name: "May"
};
user.name = "Khine"; // (*)
alert(user.name); // Khine

Property value shorthand
function makeUser(name, age) {
  return{
    name, // name: name,
    age // age: age
  }
}

let user = makeUser("John", 30);
alert(user.name); // John

Object copying, references
let user = { name: "John" };
let admin = user; // copy the reference

https://javascript.info/object-copy
Comparison by reference
let a = {};
let b = a; // copy the reference
alert( a == b ); // true, both variables reference the same object
alert( a === b ); // true

here two independent objects are not equal, even though both are empty:
let a = {};
let b = {}; // two independent objects
alert( a == b ); // false

We can use any variable to access the object and modify its contents:
let user = { name: 'John' };
let admin = user;
admin.name = 'Pete'; // changed by the "admin" reference
alert(user.name); // 'Pete', changes are seen from the "user" reference

Cloning
let user = {
  name: "John",
  age: 30
};
let clone = {}; // the new empty object
// let's copy all user properties into it
for (let key in user) {
  clone[key] = user[key];
}
// now clone is a fully independent object with the same content
clone.name = "Pete"; // changed the data in it
alert( user.name ); // still John in the original object

**************************************************************

Destructuring assignment
The two most used data structures in JavaScript are Object and Array.

let a, b, rest;
[a, b] = [10, 20];
console.log(a);
// expected output: 10
console.log(b);
// expected output: 20
[a, b, ...rest] = [10, 20, 30, 40, 50];
console.log(rest);
// expected output: Array [30,40,50]

Basic variable assignment
const foo = ['one', 'two', 'three'];
const [red, yellow, green] = foo;
console.log(red); // "one"
console.log(yellow); // "two"
console.log(green); // "three"

**************************************************************

Array
https://www.w3schools.com/js/js_arrays.asp
1.Create array
const cars = [];
cars[0]= "Saab";
cars[1]= "Volvo";
cars[2]= "BMW";

const cars = new Array("Saab", "Volvo", "BMW");
const cars = ["Saab", "Volvo", "BMW"];
let car = cars[0];

const cars = ["Saab", "Volvo", "BMW"];
cars[0] = "Opel";

Array Elements Can Be Objects
myArray[0] = Date.now;
myArray[1] = myFunction;
myArray[2] = myCars;

It is a common practice to declare arrays with the const keyword.
https://www.w3schools.com/js/js_array_const.asp
const cars = ["Saab", "Volvo", "BMW"];
cars = ["Toyota", "Volvo", "Audi"];    // ERROR


const cars = ["Saab", "Volvo", "BMW"];
cars[0] = "Toyota";
cars.push("Audi");

Spaces and line breaks are not important. A declaration can span multiple lines:
const cars = [
  "Saab",
  "Volvo",
  "BMW"
];


Array Method
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array
https://www.w3schools.com/js/js_array_methods.asp

arr.length => length of array
toString()  => Converting Arrays to Strings
All JavaScript objects have a toString() method.
arr.push(...items) – adds items to the end,
arr.pop() – extracts an item from the end,
arr.shift() – extracts an item from the beginning,
arr.unshift(...items) – adds items to the beginning,
 splice() =>  can be used to add new items to an array
   Example: var fruits = ["Banana", "Orange", "Apple", "Mango"];
                   fruits.splice(2, 0, "Lemon", "Kiwi");
The first parameter (2) defines the position where new elements should be added (spliced in).
The second parameter (0) defines how many elements should be removed.
The rest of the parameters ("Lemon" , "Kiwi") define the new elements to be added.
splice() => returns an array with the deleted items:
fruits.splice(2, 2, "Lemon", "Kiwi");
fruits.splice(0, 1);
concat() => creates a new array by merging (concatenating) existing arrays:
slice() => slices out a piece of an array into a new array.
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice

var fruits = ["Banana", "Orange", "Lemon", "Apple", "Mango"];
var citrus = fruits.slice(3);
var test = slice(1, 3)
The method then selects elements from the start argument, and up to (but not including) the end argument.
sort() =>  sorts an array alphabetically.
https://www.w3schools.com/js/js_array_sort.asp
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort
https://www.w3schools.com/jsref/jsref_sort.asp

reverse() => reverses the elements in an array.
